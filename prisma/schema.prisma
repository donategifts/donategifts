generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("MYSQL_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model address {
  id        Int       @id @default(autoincrement())
  address1  String    @db.VarChar(255)
  address2  String?   @db.VarChar(255)
  city      String    @db.VarChar(255)
  country   String    @db.VarChar(255)
  state     String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
  deletedAt DateTime? @db.DateTime(0)
  agency    agency?
  child     child[]
}

model agency {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  bio            String?          @db.VarChar(255)
  isVerified     Boolean          @default(false)
  phone          String           @db.VarChar(255)
  website        String?          @db.VarChar(255)
  addressId      Int              @unique
  createdAt      DateTime         @default(now()) @db.Timestamp(0)
  updatedAt      DateTime         @default(now()) @db.Timestamp(0)
  deletedAt      DateTime?        @db.DateTime(0)
  address        address          @relation(fields: [addressId], references: [id])
  agency_members agency_members[]
  wish_card      wish_card[]
}

model agency_members {
  agencyId Int
  userId   Int
  role     agency_members_role
  agency   agency              @relation(fields: [agencyId], references: [id])
  user     user                @relation(fields: [userId], references: [id])

  @@id([agencyId, userId])
  @@index([userId], name: "userId")
}

model child {
  id        Int         @id @default(autoincrement())
  birthday  DateTime    @db.Date
  firstName String      @db.VarChar(255)
  lastName  String?     @db.VarChar(255)
  interest  String      @db.VarChar(255)
  bio       String?     @db.VarChar(255)
  addressId Int
  createdAt DateTime    @default(now()) @db.Timestamp(0)
  updatedAt DateTime    @default(now()) @db.Timestamp(0)
  deletedAt DateTime?   @db.DateTime(0)
  address   address     @relation(fields: [addressId], references: [id])
  wish_card wish_card[]

  @@index([addressId], name: "addressId")
}

model donation {
  id         Int             @id @default(autoincrement())
  wishcardId Int
  userId     Int
  amount     Float           @db.Float
  status     donation_status
  createdAt  DateTime        @default(now()) @db.Timestamp(0)
  updatedAt  DateTime        @default(now()) @db.Timestamp(0)
  deletedAt  DateTime?       @db.DateTime(0)
  user       user            @relation(fields: [userId], references: [id])
  wish_card  wish_card       @relation(fields: [wishcardId], references: [id])

  @@index([userId], name: "userId")
  @@index([wishcardId], name: "wishcardId")
}

model message {
  id         Int       @id @default(autoincrement())
  userId     Int
  wishcardId Int
  message    String    @db.VarChar(255)
  createdAt  DateTime  @default(now()) @db.Timestamp(0)
  updatedAt  DateTime  @default(now()) @db.Timestamp(0)
  deletedAt  DateTime? @db.DateTime(0)
  user       user      @relation(fields: [userId], references: [id])
  wish_card  wish_card @relation(fields: [wishcardId], references: [id])

  @@index([userId], name: "userId")
  @@index([wishcardId], name: "wishcardId")
}

model user {
  id                                   Int              @id @default(autoincrement())
  firstName                            String           @db.VarChar(255)
  lastName                             String           @db.VarChar(255)
  profileImage                         String?          @db.VarChar(255)
  email                                String           @unique @db.VarChar(255)
  emailVerified                        Boolean          @default(false)
  emailVerificationHash                String?          @unique @db.VarChar(255)
  role                                 user_role
  loginMode                            user_loginMode
  password                             String           @db.VarChar(255)
  passwordResetToken                   String?          @unique @db.VarChar(255)
  passwordResetTokenExpires            DateTime?        @db.DateTime(0)
  createdAt                            DateTime         @default(now()) @db.Timestamp(0)
  updatedAt                            DateTime         @default(now()) @db.Timestamp(0)
  deletedAt                            DateTime?        @db.DateTime(0)
  agency_members                       agency_members[]
  donation                             donation[]
  message                              message[]
  wish_card_userTowish_card_createdBy  wish_card[]      @relation("userTowish_card_createdBy")
  wish_card_userTowish_card_isLockedBy wish_card[]      @relation("userTowish_card_isLockedBy")
}

model wish_card {
  id                              Int              @id @default(autoincrement())
  image                           String           @db.VarChar(255)
  itemPrice                       Float            @db.Float
  itemUrl                         String           @db.VarChar(255)
  childId                         Int
  agencyId                        Int
  createdBy                       Int
  isLockedBy                      Int?
  isLockedUntil                   DateTime?        @db.DateTime(0)
  status                          wish_card_status
  occasion                        String?          @db.VarChar(255)
  createdAt                       DateTime         @default(now()) @db.Timestamp(0)
  updatedAt                       DateTime         @default(dbgenerated("('0000-00-00 00:00:00')")) @db.Timestamp(0)
  deletedAt                       DateTime?        @db.DateTime(0)
  agency                          agency           @relation(fields: [agencyId], references: [id])
  child                           child            @relation(fields: [childId], references: [id])
  user_userTowish_card_createdBy  user             @relation("userTowish_card_createdBy", fields: [createdBy], references: [id])
  user_userTowish_card_isLockedBy user?            @relation("userTowish_card_isLockedBy", fields: [isLockedBy], references: [id])
  donation                        donation[]
  message                         message[]

  @@index([agencyId], name: "agencyId")
  @@index([childId], name: "childId")
  @@index([createdBy], name: "createdBy")
  @@index([isLockedBy], name: "isLockedBy")
}

enum agency_members_role {
  admin
  member
}

enum donation_status {
  confirmed
  ordered
  delivered
}

enum user_role {
  donor
  partner
  admin
  developer
}

enum user_loginMode {
  facebook
  google
  default
}

enum wish_card_status {
  draft
  published
  donated
}
